package com.example.michaelcolomb.clipscroller;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;

import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

/**
 * This class runs the main activity for the application. It coordinates the recycler view
 * with Firebase Database and Storage to retrieve submitted videos, while allowing users
 * to upload videos and include a title.
 * @author colomb2
 */
public class MainActivity extends AppCompatActivity {

    private static final int MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE = 1;
    private static final long TWO_SECONDS = 2000;
    protected static final String CLIP_ADDRESS = "colomb2/clips";

    EditText mTitleField;
    RecyclerView mRecyclerView;
    private DatabaseReference mEntriesReference;

    /**
     * This method is called when the main activity is created. It asks for permission
     * if required. It sets up the firebase recycler view to retrieve and display videos
     * from each stored clip.
     *
     * @param savedInstanceState past state of live main activity
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        FirebaseDatabase mDatabase = FirebaseDatabase.getInstance();
        mEntriesReference = mDatabase.getReference(CLIP_ADDRESS);

        mTitleField = (EditText) findViewById(R.id.title);

        checkPermissions();

        final FirebaseRecyclerAdapter<Clip, ClipAdapter.ClipViewHolder> firebaseRecyclerAdapter;
        firebaseRecyclerAdapter = new ClipAdapter(Clip.class, R.layout.clip_list_item,
                ClipAdapter.ClipViewHolder.class, mEntriesReference);

        mRecyclerView = (RecyclerView) findViewById(R.id.rv_clips);
        mRecyclerView.setHasFixedSize(false);
        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        mRecyclerView.setAdapter(firebaseRecyclerAdapter);
    }

    /**
     * This helper function checks if the READ_EXTERNAL_STORAGE permission is not approved
     * yet. If not, it asks requests permission.
     * https://developer.android.com/training/permissions/requesting.html
     */
    private void checkPermissions() {
        if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                    MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE);
        }
    }

    /**
     * This method is activated after the user has inputted their permissions. If permission
     * was not granted, an informational toast is displayed and the app closes.
     *
     * @param requestCode  int identifier for storage permission
     * @param permissions  list of permissions with IDs
     * @param grantResults list of whether permissions have been granted
     */
    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        if (requestCode == MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE) {
            if (grantResults.length <= 0
                    || grantResults[0] != PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, getString(R.string.deniedPermissions), Toast.LENGTH_LONG);
                try {
                    Thread.sleep(TWO_SECONDS);
                } catch (InterruptedException e) {
                    System.exit(1);
                }
                System.exit(0);
            }
        }
    }

    public void launchSubmit(View view) {
        Intent intent = new Intent(this, SubmissionActivity.class);
        startActivity(intent);
    }
}